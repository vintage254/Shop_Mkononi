// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  BUYER
  SELLER
  ADMIN
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum BuyerVerificationType {
  NONE
  ID
  PHONE
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  password          String?           // Made optional for OAuth users
  name              String?
  image             String?
  phone             String?           @unique
  phoneVerified     Boolean           @default(false) @map("phone_verified")
  role              UserRole          @default(BUYER)
  requestedRole     UserRole?         @map("requested_role")
  isVerified        Boolean           @default(false)
  idNumber          String?           @map("id_number")
  idFrontImage      String?           @map("id_front_image")
  idBackImage       String?           @map("id_back_image")
  selfieImage       String?           @map("selfie_image")
  verificationStatus VerificationStatus @default(PENDING)
  verificationNotes  String?           @map("verification_notes")
  verifiedAt        DateTime?         @map("verified_at")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  accounts          Account[]
  sessions          Session[]
  reviews           Review[]
  cart              Cart?
  wishlist          Wishlist?
  notifications     Notification[]
  shops             Shop[]            @relation("UserShops")
  orders            Order[]
  verificationCode  VerificationCode?

  @@map("users")
}

model Shop {
  id              String    @id @default(uuid())
  slug            String    @unique
  name            String
  description     String?
  sellerId        String    @map("seller_id")
  seller          User      @relation("UserShops", fields: [sellerId], references: [id])
  logoUrl         String?   @map("logo_url")
  bannerUrl       String?   @map("banner_url")
  primaryColor    String    @default("#0F766E") @map("primary_color")
  secondaryColor  String    @default("#FFFFFF") @map("secondary_color")
  accentColor     String    @default("#F59E0B") @map("accent_color")
  fontFamily      String    @default("Inter") @map("font_family")
  themeId         String?   @map("theme_id")
  layoutConfig    Json?     @map("layout_config")
  customCSS       Json?     @map("custom_css")
  transportOptions Json?    @map("transport_options")
  buyerVerification BuyerVerificationType @default(NONE) @map("buyer_verification")
  products        Product[]
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("shops")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  price       Decimal  @db.Decimal(10, 2)
  images      String[]
  categoryId  String   @map("category_id")
  category    Category @relation(fields: [categoryId], references: [id])
  shopId      String   @map("shop_id")
  shop        Shop     @relation(fields: [shopId], references: [id])
  orders      Order[]
  reviews     Review[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("products")
}

model Order {
  id              String      @id @default(uuid())
  buyerId         String      @map("buyer_id")
  buyer           User        @relation(fields: [buyerId], references: [id])
  productId       String      @map("product_id")
  product         Product     @relation(fields: [productId], references: [id])
  quantity        Int
  totalAmount     Decimal     @db.Decimal(10, 2) @map("total_amount")
  status          OrderStatus @default(PENDING)
  paymentMethod   String      @map("payment_method")
  paymentId       String?     @map("payment_id")
  deliveryAddress String?     @map("delivery_address")
  deliveryNotes   String?     @map("delivery_notes")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  @@map("orders")
}

model Category {
  id       String    @id @default(uuid())
  name     String
  slug     String    @unique
  products Product[]

  @@map("categories")
}

model Cart {
  id         String   @id @default(uuid())
  userId     String   @unique @map("user_id")
  user       User     @relation(fields: [userId], references: [id])
  items      Json[]
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("carts")
}

model Wishlist {
  id         String   @id @default(uuid())
  userId     String   @unique @map("user_id")
  user       User     @relation(fields: [userId], references: [id])
  items      Json[]
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("wishlists")
}

model Review {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  productId String   @map("product_id")
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("reviews")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  type      String
  title     String
  message   String
  read      Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("notifications")
}

model VerificationCode {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  code      String
  expires   DateTime
  createdAt DateTime @default(now()) @map("created_at")

  @@map("verification_codes")
}
